// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrequencySimulatorClient is the client API for FrequencySimulator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrequencySimulatorClient interface {
	Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Frequency, error)
	Read(ctx context.Context, in *Config, opts ...grpc.CallOption) (FrequencySimulator_ReadClient, error)
}

type frequencySimulatorClient struct {
	cc grpc.ClientConnInterface
}

func NewFrequencySimulatorClient(cc grpc.ClientConnInterface) FrequencySimulatorClient {
	return &frequencySimulatorClient{cc}
}

func (c *frequencySimulatorClient) Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Frequency, error) {
	out := new(Frequency)
	err := c.cc.Invoke(ctx, "/freqsim.FrequencySimulator/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frequencySimulatorClient) Read(ctx context.Context, in *Config, opts ...grpc.CallOption) (FrequencySimulator_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrequencySimulator_ServiceDesc.Streams[0], "/freqsim.FrequencySimulator/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &frequencySimulatorReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrequencySimulator_ReadClient interface {
	Recv() (*Frequency, error)
	grpc.ClientStream
}

type frequencySimulatorReadClient struct {
	grpc.ClientStream
}

func (x *frequencySimulatorReadClient) Recv() (*Frequency, error) {
	m := new(Frequency)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrequencySimulatorServer is the server API for FrequencySimulator service.
// All implementations must embed UnimplementedFrequencySimulatorServer
// for forward compatibility
type FrequencySimulatorServer interface {
	Get(context.Context, *empty.Empty) (*Frequency, error)
	Read(*Config, FrequencySimulator_ReadServer) error
	mustEmbedUnimplementedFrequencySimulatorServer()
}

// UnimplementedFrequencySimulatorServer must be embedded to have forward compatible implementations.
type UnimplementedFrequencySimulatorServer struct {
}

func (UnimplementedFrequencySimulatorServer) Get(context.Context, *empty.Empty) (*Frequency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFrequencySimulatorServer) Read(*Config, FrequencySimulator_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedFrequencySimulatorServer) mustEmbedUnimplementedFrequencySimulatorServer() {}

// UnsafeFrequencySimulatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrequencySimulatorServer will
// result in compilation errors.
type UnsafeFrequencySimulatorServer interface {
	mustEmbedUnimplementedFrequencySimulatorServer()
}

func RegisterFrequencySimulatorServer(s grpc.ServiceRegistrar, srv FrequencySimulatorServer) {
	s.RegisterService(&FrequencySimulator_ServiceDesc, srv)
}

func _FrequencySimulator_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrequencySimulatorServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/freqsim.FrequencySimulator/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrequencySimulatorServer).Get(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrequencySimulator_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Config)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrequencySimulatorServer).Read(m, &frequencySimulatorReadServer{stream})
}

type FrequencySimulator_ReadServer interface {
	Send(*Frequency) error
	grpc.ServerStream
}

type frequencySimulatorReadServer struct {
	grpc.ServerStream
}

func (x *frequencySimulatorReadServer) Send(m *Frequency) error {
	return x.ServerStream.SendMsg(m)
}

// FrequencySimulator_ServiceDesc is the grpc.ServiceDesc for FrequencySimulator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrequencySimulator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freqsim.FrequencySimulator",
	HandlerType: (*FrequencySimulatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _FrequencySimulator_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _FrequencySimulator_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "freqsim.proto",
}
